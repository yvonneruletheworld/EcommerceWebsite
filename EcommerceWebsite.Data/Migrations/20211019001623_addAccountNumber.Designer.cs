// <auto-generated />
using System;
using EcommerceWebsite.Data.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EcommerceWebsite.Data.Migrations
{
    [DbContext(typeof(EcomWebDbContext))]
    [Migration("20211019001623_addAccountNumber")]
    partial class addAccountNumber
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EcommerceWebsite.Data.Entities.BinhLuan", b =>
                {
                    b.Property<string>("MaKhachHang")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MaSanPham")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("DaXoa")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("NgaySuaCuoi")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("NgayTao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("NgayXoa")
                        .HasColumnType("datetime2");

                    b.Property<string>("NguoiSuaCuoi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NguoiTao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NguoiXoa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NoiDung")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SoSao")
                        .HasColumnType("int");

                    b.HasKey("MaKhachHang", "MaSanPham");

                    b.HasIndex("MaSanPham");

                    b.ToTable("NHANXETSANPHAM");
                });

            modelBuilder.Entity("EcommerceWebsite.Data.Entities.BoPhan", b =>
                {
                    b.Property<string>("MaBoPhan")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TenBoPhan")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("MaBoPhan");

                    b.ToTable("BOPHAN");
                });

            modelBuilder.Entity("EcommerceWebsite.Data.Entities.ChiTietHoaDon", b =>
                {
                    b.Property<string>("ProductId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("HoaDonId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("GiaBan")
                        .HasColumnType("money");

                    b.Property<int>("SoLuong")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("ProductId", "HoaDonId");

                    b.HasIndex("HoaDonId");

                    b.ToTable("CHITIETHOADON");
                });

            modelBuilder.Entity("EcommerceWebsite.Data.Entities.ChiTietNhapSanPham", b =>
                {
                    b.Property<string>("MaNhap")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MaSanPham")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("DonGia")
                        .HasColumnType("money");

                    b.Property<int>("SoLuong")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<decimal>("ThanhTien")
                        .HasColumnType("money");

                    b.HasKey("MaNhap", "MaSanPham");

                    b.HasIndex("MaSanPham");

                    b.ToTable("CHITIETNHAPSANPHAM");
                });

            modelBuilder.Entity("EcommerceWebsite.Data.Entities.DanhGiaSanPham", b =>
                {
                    b.Property<string>("MaDanhGia")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("HinhAnhDanhGia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaSanPham")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NoiDung")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MaDanhGia");

                    b.HasIndex("MaSanPham")
                        .IsUnique()
                        .HasFilter("[MaSanPham] IS NOT NULL");

                    b.ToTable("DANHGIASANPHAM");
                });

            modelBuilder.Entity("EcommerceWebsite.Data.Entities.DanhMuc", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("DaXoa")
                        .HasColumnType("bit");

                    b.Property<bool>("IsShowInHome")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("NgaySuaCuoi")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("NgayTao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("NgayXoa")
                        .HasColumnType("datetime2");

                    b.Property<string>("NguoiSuaCuoi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NguoiTao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NguoiXoa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("DANHMUC");

                    b.HasData(
                        new
                        {
                            Id = "DM001",
                            DaXoa = false,
                            IsShowInHome = true,
                            Name = "Điện thoại",
                            NgayTao = new DateTime(2021, 10, 19, 0, 16, 22, 642, DateTimeKind.Utc).AddTicks(2353),
                            NguoiTao = "admin",
                            Status = 1
                        },
                        new
                        {
                            Id = "DM002",
                            DaXoa = false,
                            IsShowInHome = true,
                            Name = "iPhone",
                            NgayTao = new DateTime(2021, 10, 19, 0, 16, 22, 642, DateTimeKind.Utc).AddTicks(3173),
                            NguoiTao = "admin",
                            ParentId = "DM001",
                            Status = 1
                        },
                        new
                        {
                            Id = "DM003",
                            DaXoa = false,
                            IsShowInHome = true,
                            Name = "Samsung",
                            NgayTao = new DateTime(2021, 10, 19, 0, 16, 22, 642, DateTimeKind.Utc).AddTicks(3217),
                            NguoiTao = "admin",
                            ParentId = "DM001",
                            Status = 1
                        });
                });

            modelBuilder.Entity("EcommerceWebsite.Data.Entities.DiaChiKhachHang", b =>
                {
                    b.Property<string>("MaDiaChi")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MaKhachHang")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("DaXoa")
                        .HasColumnType("bit");

                    b.Property<string>("DiaChi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("NgaySuaCuoi")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("NgayTao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("NgayXoa")
                        .HasColumnType("datetime2");

                    b.Property<string>("NguoiSuaCuoi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NguoiTao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NguoiXoa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SDT")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.HasKey("MaDiaChi", "MaKhachHang");

                    b.HasIndex("MaKhachHang");

                    b.ToTable("DIACHIKHACHHANG");
                });

            modelBuilder.Entity("EcommerceWebsite.Data.Entities.DinhLuong", b =>
                {
                    b.Property<string>("MaThuocTinh")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MaSanPham")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DonVi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("GiaTri")
                        .HasColumnType("real");

                    b.HasKey("MaThuocTinh", "MaSanPham");

                    b.HasIndex("MaSanPham");

                    b.ToTable("DINHLUONG");
                });

            modelBuilder.Entity("EcommerceWebsite.Data.Entities.GiaoHang", b =>
                {
                    b.Property<string>("MaGiaoHang")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("DaXoa")
                        .HasColumnType("bit");

                    b.Property<string>("MaHoaDon")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("NgayDuKienGiao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("NgaySuaCuoi")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("NgayTao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("NgayTiepNhan")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("NgayXoa")
                        .HasColumnType("datetime2");

                    b.Property<string>("NguoiSuaCuoi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NguoiTao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NguoiXoa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrangThaiHienTai")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MaGiaoHang");

                    b.HasIndex("MaHoaDon")
                        .IsUnique()
                        .HasFilter("[MaHoaDon] IS NOT NULL");

                    b.ToTable("GIAOHANG");
                });

            modelBuilder.Entity("EcommerceWebsite.Data.Entities.HoaDon", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("DaXoa")
                        .HasColumnType("bit");

                    b.Property<string>("MaDiaChi")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MaKhachHang")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MaKhuyenMai")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("NgaySuaCuoi")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("NgayTao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("NgayXoa")
                        .HasColumnType("datetime2");

                    b.Property<string>("NguoiSuaCuoi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NguoiTao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NguoiXoa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PhiGiaoHang")
                        .HasColumnType("money");

                    b.Property<string>("PhuongThucThanhToan")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ThanhTien")
                        .HasColumnType("money");

                    b.Property<int>("TinhTrang")
                        .HasColumnType("int");

                    b.Property<decimal>("TongCong")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.HasIndex("MaKhachHang");

                    b.HasIndex("MaKhuyenMai");

                    b.HasIndex("MaDiaChi", "MaKhachHang");

                    b.ToTable("HOADON");
                });

            modelBuilder.Entity("EcommerceWebsite.Data.Entities.KhachHang", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("DaXoa")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("GioiTinh")
                        .HasColumnType("bit");

                    b.Property<string>("HinhAnh")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HoTen")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("LoginString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("NgaySuaCuoi")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("NgayTao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("NgayXoa")
                        .HasColumnType("datetime2");

                    b.Property<string>("NguoiSuaCuoi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NguoiTao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NguoiXoa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sdt")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("KHACHHANG");

                    b.HasData(
                        new
                        {
                            Id = "8d04dce2-969a-435d-bba4-df3f325983dc",
                            DaXoa = false,
                            Email = "yvonnetran.work@gmail.com",
                            GioiTinh = false,
                            HoTen = "Yvonne Tran",
                            NgayTao = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Sdt = "no value",
                            Status = 1,
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("EcommerceWebsite.Data.Entities.KhuyenMai", b =>
                {
                    b.Property<string>("MaKhuyenMai")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("DaXoa")
                        .HasColumnType("bit");

                    b.Property<string>("HinhAnh")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("NgaySuaCuoi")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("NgayTao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("NgayXoa")
                        .HasColumnType("datetime2");

                    b.Property<string>("NguoiSuaCuoi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NguoiTao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NguoiXoa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("PhanTram")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(0f);

                    b.Property<string>("TenKhuyenMai")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MaKhuyenMai");

                    b.ToTable("KHUYENMAI");
                });

            modelBuilder.Entity("EcommerceWebsite.Data.Entities.LichSuGia", b =>
                {
                    b.Property<string>("MaSanPham")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("NgayTao")
                        .HasColumnType("datetime2");

                    b.Property<bool>("DaXoa")
                        .HasColumnType("bit");

                    b.Property<decimal>("GiaMoi")
                        .HasColumnType("money");

                    b.Property<DateTime?>("NgaySuaCuoi")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("NgayXoa")
                        .HasColumnType("datetime2");

                    b.Property<string>("NguoiSuaCuoi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NguoiTao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NguoiXoa")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MaSanPham", "NgayTao");

                    b.ToTable("LICHSUGIA");
                });

            modelBuilder.Entity("EcommerceWebsite.Data.Entities.MauMaSanPham", b =>
                {
                    b.Property<string>("MaSanPham")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TenMauMa")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("HinhAnh")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaMauMa")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MaSanPham", "TenMauMa");

                    b.ToTable("MAUMASANPHAM");
                });

            modelBuilder.Entity("EcommerceWebsite.Data.Entities.NhaCungCap", b =>
                {
                    b.Property<string>("MaNhaCungCap")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("DaXoa")
                        .HasColumnType("bit");

                    b.Property<string>("DiaChi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("NgaySuaCuoi")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("NgayTao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("NgayXoa")
                        .HasColumnType("datetime2");

                    b.Property<string>("NguoiSuaCuoi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NguoiTao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NguoiXoa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SDT")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("TenNhaCungCap")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("MaNhaCungCap");

                    b.ToTable("NHACUNGCAP");
                });

            modelBuilder.Entity("EcommerceWebsite.Data.Entities.NhanVien", b =>
                {
                    b.Property<string>("MaNhanVien")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("DaXoa")
                        .HasColumnType("bit");

                    b.Property<string>("DiaChi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HinhAnh")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LoginString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaBoPhan")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("NgaySinh")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("NgaySuaCuoi")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("NgayTao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("NgayXoa")
                        .HasColumnType("datetime2");

                    b.Property<string>("NguoiSuaCuoi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NguoiTao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NguoiXoa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SDT")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TenNhanVien")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("MaNhanVien");

                    b.HasIndex("MaBoPhan");

                    b.ToTable("NHANVIEN");
                });

            modelBuilder.Entity("EcommerceWebsite.Data.Entities.PhieuNhap", b =>
                {
                    b.Property<string>("MaPhieuNhap")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("DaXoa")
                        .HasColumnType("bit");

                    b.Property<string>("MaNhaCungCap")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MaNhanVien")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("NgaySuaCuoi")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("NgayTao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("NgayXoa")
                        .HasColumnType("datetime2");

                    b.Property<string>("NguoiSuaCuoi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NguoiTao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NguoiXoa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TongTien")
                        .HasColumnType("money");

                    b.HasKey("MaPhieuNhap");

                    b.HasIndex("MaNhaCungCap");

                    b.HasIndex("MaNhanVien");

                    b.ToTable("PHIEUNHAP");
                });

            modelBuilder.Entity("EcommerceWebsite.Data.Entities.SanPham", b =>
                {
                    b.Property<string>("MaSanPham")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("DaXoa")
                        .HasColumnType("bit");

                    b.Property<string>("HinhAnh")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaLoaiSanPham")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("0");

                    b.Property<string>("MaXepHang")
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("NgaySuaCuoi")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("NgayTao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("NgayXoa")
                        .HasColumnType("datetime2");

                    b.Property<string>("NguoiSuaCuoi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NguoiTao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NguoiXoa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NhanHieu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SoLuongTon")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TenSanPham")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("Utility")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("MaSanPham");

                    b.HasIndex("MaLoaiSanPham");

                    b.HasIndex("MaXepHang");

                    b.ToTable("SANPHAM");

                    b.HasData(
                        new
                        {
                            MaSanPham = "SP001",
                            DaXoa = false,
                            MaLoaiSanPham = "DM003",
                            NgayTao = new DateTime(2021, 10, 19, 0, 16, 22, 643, DateTimeKind.Utc).AddTicks(2584),
                            NguoiTao = "admin",
                            NhanHieu = "Samsung",
                            SoLuongTon = 1,
                            Status = 1,
                            TenSanPham = "Samsung Galaxy Z Fold3 5G 512GB",
                            Utility = 0m
                        },
                        new
                        {
                            MaSanPham = "SP002",
                            DaXoa = false,
                            MaLoaiSanPham = "DM003",
                            NgayTao = new DateTime(2021, 10, 19, 0, 16, 22, 643, DateTimeKind.Utc).AddTicks(3048),
                            NguoiTao = "admin",
                            NhanHieu = "Samsung",
                            SoLuongTon = 1,
                            Status = 1,
                            TenSanPham = "Samsung Galaxy Z Flip3 5G 128GB",
                            Utility = 0m
                        });
                });

            modelBuilder.Entity("EcommerceWebsite.Data.Entities.ThuocTinh", b =>
                {
                    b.Property<string>("MaThuocTinh")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TenThuocTinh")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MaThuocTinh");

                    b.ToTable("THUOCTINH");
                });

            modelBuilder.Entity("EcommerceWebsite.Data.Entities.TinhTrangGiaoHang", b =>
                {
                    b.Property<string>("MaGiaoHang")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MaTinhTrangGiaoHang")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("DaXoa")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("NgaySuaCuoi")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("NgayTao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("NgayXoa")
                        .HasColumnType("datetime2");

                    b.Property<string>("NguoiSuaCuoi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NguoiTao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NguoiXoa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TinhTrang")
                        .HasColumnType("int");

                    b.HasKey("MaGiaoHang", "MaTinhTrangGiaoHang");

                    b.ToTable("TINHTRANGIAOHANG");
                });

            modelBuilder.Entity("EcommerceWebsite.Data.Entities.XepHangSanPham", b =>
                {
                    b.Property<string>("MaHang")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TenHang")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MaHang");

                    b.ToTable("HANGSANPHAM");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AppRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AppUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("AppUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("8d04dce2-969a-435d-bba4-df3f325983dc"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("EcommerceWebsite.Data.Identity.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeleteUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdAuto")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Ip")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModificationUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LoginString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OTPCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasIndex("IdAuto")
                        .IsUnique()
                        .HasFilter("[IdAuto] IS NOT NULL");

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "8d04dce2-969a-435d-bba4-df3f325983dc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "837f7f56-fcbf-4029-b998-ad644f7faa13",
                            Email = "yvonnetran.work@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "yvonnetran.work@gmail.com",
                            NormalizedUserName = "admin",
                            PasswordHash = "AQAAAAEAACcQAAAAEA2HehmF8AZ0xY5m1BAwQdtxqWIQF2N3Qk2ih1ZODCjAXjRkcOAudu5nqnsQ9tAyrg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "admin",
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Status = 1
                        });
                });

            modelBuilder.Entity("EcommerceWebsite.Data.Entities.BinhLuan", b =>
                {
                    b.HasOne("EcommerceWebsite.Data.Entities.KhachHang", "KhachHang")
                        .WithMany("BinhLuans")
                        .HasForeignKey("MaKhachHang")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcommerceWebsite.Data.Entities.SanPham", "SanPham")
                        .WithMany("BinhLuans")
                        .HasForeignKey("MaSanPham")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KhachHang");

                    b.Navigation("SanPham");
                });

            modelBuilder.Entity("EcommerceWebsite.Data.Entities.ChiTietHoaDon", b =>
                {
                    b.HasOne("EcommerceWebsite.Data.Entities.HoaDon", "HoaDons")
                        .WithMany("ChiTietHoaDons")
                        .HasForeignKey("HoaDonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcommerceWebsite.Data.Entities.SanPham", "SanPhams")
                        .WithMany("ChiTietHoaDons")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HoaDons");

                    b.Navigation("SanPhams");
                });

            modelBuilder.Entity("EcommerceWebsite.Data.Entities.ChiTietNhapSanPham", b =>
                {
                    b.HasOne("EcommerceWebsite.Data.Entities.PhieuNhap", "PhieuNhap")
                        .WithMany("ChiTietNhapSanPhams")
                        .HasForeignKey("MaNhap")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcommerceWebsite.Data.Entities.SanPham", "SanPham")
                        .WithMany("ChiTietNhapSanPhams")
                        .HasForeignKey("MaSanPham")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PhieuNhap");

                    b.Navigation("SanPham");
                });

            modelBuilder.Entity("EcommerceWebsite.Data.Entities.DanhGiaSanPham", b =>
                {
                    b.HasOne("EcommerceWebsite.Data.Entities.SanPham", "SanPham")
                        .WithOne("DanhGiaSanPham")
                        .HasForeignKey("EcommerceWebsite.Data.Entities.DanhGiaSanPham", "MaSanPham");

                    b.Navigation("SanPham");
                });

            modelBuilder.Entity("EcommerceWebsite.Data.Entities.DiaChiKhachHang", b =>
                {
                    b.HasOne("EcommerceWebsite.Data.Entities.KhachHang", "KhachHang")
                        .WithMany("DiaChiKhachHangs")
                        .HasForeignKey("MaKhachHang")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KhachHang");
                });

            modelBuilder.Entity("EcommerceWebsite.Data.Entities.DinhLuong", b =>
                {
                    b.HasOne("EcommerceWebsite.Data.Entities.SanPham", "SanPham")
                        .WithMany("DinhLuongs")
                        .HasForeignKey("MaSanPham")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcommerceWebsite.Data.Entities.ThuocTinh", "ThuocTinh")
                        .WithMany("DinhLuongs")
                        .HasForeignKey("MaThuocTinh")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SanPham");

                    b.Navigation("ThuocTinh");
                });

            modelBuilder.Entity("EcommerceWebsite.Data.Entities.GiaoHang", b =>
                {
                    b.HasOne("EcommerceWebsite.Data.Entities.HoaDon", "HoaDon")
                        .WithOne("GiaoHang")
                        .HasForeignKey("EcommerceWebsite.Data.Entities.GiaoHang", "MaHoaDon");

                    b.Navigation("HoaDon");
                });

            modelBuilder.Entity("EcommerceWebsite.Data.Entities.HoaDon", b =>
                {
                    b.HasOne("EcommerceWebsite.Data.Entities.KhachHang", "KhachHang")
                        .WithMany("HoaDons")
                        .HasForeignKey("MaKhachHang");

                    b.HasOne("EcommerceWebsite.Data.Entities.KhuyenMai", "KhuyenMai")
                        .WithMany("HoaDons")
                        .HasForeignKey("MaKhuyenMai");

                    b.HasOne("EcommerceWebsite.Data.Entities.DiaChiKhachHang", "DiaChiKhachHang")
                        .WithMany("HoaDons")
                        .HasForeignKey("MaDiaChi", "MaKhachHang");

                    b.Navigation("DiaChiKhachHang");

                    b.Navigation("KhachHang");

                    b.Navigation("KhuyenMai");
                });

            modelBuilder.Entity("EcommerceWebsite.Data.Entities.LichSuGia", b =>
                {
                    b.HasOne("EcommerceWebsite.Data.Entities.SanPham", "SanPham")
                        .WithMany("LichSuGias")
                        .HasForeignKey("MaSanPham")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SanPham");
                });

            modelBuilder.Entity("EcommerceWebsite.Data.Entities.MauMaSanPham", b =>
                {
                    b.HasOne("EcommerceWebsite.Data.Entities.SanPham", "SanPham")
                        .WithMany("MauMaSanPhams")
                        .HasForeignKey("MaSanPham")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SanPham");
                });

            modelBuilder.Entity("EcommerceWebsite.Data.Entities.NhanVien", b =>
                {
                    b.HasOne("EcommerceWebsite.Data.Entities.BoPhan", "BoPhan")
                        .WithMany("NhanViens")
                        .HasForeignKey("MaBoPhan");

                    b.Navigation("BoPhan");
                });

            modelBuilder.Entity("EcommerceWebsite.Data.Entities.PhieuNhap", b =>
                {
                    b.HasOne("EcommerceWebsite.Data.Entities.NhaCungCap", "NhaCungCap")
                        .WithMany("PhieuNhaps")
                        .HasForeignKey("MaNhaCungCap");

                    b.HasOne("EcommerceWebsite.Data.Entities.NhanVien", "NhanVien")
                        .WithMany("PhieuNhaps")
                        .HasForeignKey("MaNhanVien");

                    b.Navigation("NhaCungCap");

                    b.Navigation("NhanVien");
                });

            modelBuilder.Entity("EcommerceWebsite.Data.Entities.SanPham", b =>
                {
                    b.HasOne("EcommerceWebsite.Data.Entities.DanhMuc", "DanhMuc")
                        .WithMany("SanPhams")
                        .HasForeignKey("MaLoaiSanPham")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcommerceWebsite.Data.Entities.XepHangSanPham", "XepHangSanPham")
                        .WithMany("SanPhams")
                        .HasForeignKey("MaXepHang");

                    b.Navigation("DanhMuc");

                    b.Navigation("XepHangSanPham");
                });

            modelBuilder.Entity("EcommerceWebsite.Data.Entities.TinhTrangGiaoHang", b =>
                {
                    b.HasOne("EcommerceWebsite.Data.Entities.GiaoHang", "GiaoHang")
                        .WithMany("TinhTrangGiaoHangs")
                        .HasForeignKey("MaGiaoHang")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GiaoHang");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EcommerceWebsite.Data.Entities.BoPhan", b =>
                {
                    b.Navigation("NhanViens");
                });

            modelBuilder.Entity("EcommerceWebsite.Data.Entities.DanhMuc", b =>
                {
                    b.Navigation("SanPhams");
                });

            modelBuilder.Entity("EcommerceWebsite.Data.Entities.DiaChiKhachHang", b =>
                {
                    b.Navigation("HoaDons");
                });

            modelBuilder.Entity("EcommerceWebsite.Data.Entities.GiaoHang", b =>
                {
                    b.Navigation("TinhTrangGiaoHangs");
                });

            modelBuilder.Entity("EcommerceWebsite.Data.Entities.HoaDon", b =>
                {
                    b.Navigation("ChiTietHoaDons");

                    b.Navigation("GiaoHang");
                });

            modelBuilder.Entity("EcommerceWebsite.Data.Entities.KhachHang", b =>
                {
                    b.Navigation("BinhLuans");

                    b.Navigation("DiaChiKhachHangs");

                    b.Navigation("HoaDons");
                });

            modelBuilder.Entity("EcommerceWebsite.Data.Entities.KhuyenMai", b =>
                {
                    b.Navigation("HoaDons");
                });

            modelBuilder.Entity("EcommerceWebsite.Data.Entities.NhaCungCap", b =>
                {
                    b.Navigation("PhieuNhaps");
                });

            modelBuilder.Entity("EcommerceWebsite.Data.Entities.NhanVien", b =>
                {
                    b.Navigation("PhieuNhaps");
                });

            modelBuilder.Entity("EcommerceWebsite.Data.Entities.PhieuNhap", b =>
                {
                    b.Navigation("ChiTietNhapSanPhams");
                });

            modelBuilder.Entity("EcommerceWebsite.Data.Entities.SanPham", b =>
                {
                    b.Navigation("BinhLuans");

                    b.Navigation("ChiTietHoaDons");

                    b.Navigation("ChiTietNhapSanPhams");

                    b.Navigation("DanhGiaSanPham");

                    b.Navigation("DinhLuongs");

                    b.Navigation("LichSuGias");

                    b.Navigation("MauMaSanPhams");
                });

            modelBuilder.Entity("EcommerceWebsite.Data.Entities.ThuocTinh", b =>
                {
                    b.Navigation("DinhLuongs");
                });

            modelBuilder.Entity("EcommerceWebsite.Data.Entities.XepHangSanPham", b =>
                {
                    b.Navigation("SanPhams");
                });
#pragma warning restore 612, 618
        }
    }
}
